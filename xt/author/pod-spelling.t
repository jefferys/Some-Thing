#! /usr/bin/env perl

use strict;
use warnings;
use 5.010;

#pod =for :stopwords stopwords
#pod
#pod =cut

# PODNAME: xt/author/pod-spelling.t

# ABSTRACT: All subs have correctly spelled documentation?

our $VERSION = '0.0.2'; # VERSION

#pod =head1 SYNOPSIS
#pod
#pod     # Run just this author test
#pod     # cd <some built distribution version directory>
#pod     prove -lr xt/author/pod-spelling.t
#pod
#pod     # Run all author tests
#pod     # cd <developer distribution directory>
#pod     dzil test # [RunExtraTests] dist.ini plugin runs author tests by default.
#pod
#pod =head1 DESCRIPTION
#pod
#pod Misspelled words in documentation affects the user's perception of the quality
#pod of the software.
#pod
#pod Based on the test auto-generated by
#pod L<Dist::Zilla::Plugin::Test::PodSpelling|Dist::Zilla::Plugin::Test::PodSpelling>.
#pod Essentially just a wrapper around calling
#pod L<Test::Spelling::all_pod_files_spelling_ok()|Test::Spelling:/all_pod_files_spelling_ok(
#pod [@files/@directories] )>.
#pod
#pod Any correctly spelled words not recognized can be added to the list in the DATA
#pod section at the end of this test, or added into the pod with a line like
#pod
#pod    =for :stopwords some words
#pod
#pod As this addresses software quality but not functionality it is an author test.
#pod
#pod The
#pod L<Perl::Critic::Policy::Documentation::PodSpelling|Perl::Critic::Policy::Documentation::PodSpelling>
#pod module checks spelling also, on a file-by-file basis. Useful if you want to
#pod figure out what file to add rare stopwords to. This test merges the misspelled
#pod words from all files and gives statistics. Useful if you want to just list all
#pod the stopwords in one place, or to figure out which are rare and should be
#pod specified in the source pod and not in a separate word list.
#pod
#pod =cut

# For version calcualtions
use version 0.77;

# For interpolated constants
use Readonly;

# Test harness interface, we are only running the one test.
use Test::More 0.96 tests => 1;

# Need to know if have Test::Spelling 0.12 or greater, and if have
# Pod::Wordlist. Will skip this test if don't have both.
# Requiring modules with set versions is harder than with 'use'.
Readonly my $WANT_TEST_SPELLING_VERSION => 0.12;

my $isFoundTestSpelling = eval {

   # Implements pod spelling tests.
   require Test::Spelling;
   1;
};
if ($isFoundTestSpelling) {
   $isFoundTestSpelling = ( version->new( Test::Spelling->VERSION ) >=
        version->new($WANT_TEST_SPELLING_VERSION) );
}
my $isFoundPodWordlist = eval {

   # The default list of ok word spellings
   require Pod::Wordlist;
   1;
};

#pod =head1 TESTS
#pod
#pod =head2 Calling Test::Spelling::all_pod_files_spelling_ok()
#pod
#pod Checks the spelling of all pod containing files in the distributions F<lib/>,
#pod F<t/>, F<xt/>, and F<bin/> directories, if they exist. Skips testing anything if
#pod didn't find the required version of L<Test::Spelling|Test::Spelling> or any
#pod version of L<Pod::Wordlist|Pod::Wordlist>.
#pod
#pod =cut

SKIP: {
   if ( ! $isFoundTestSpelling ) {
      my $context = 'Skipping 1 of 1.';
      my $message = "Test::Spelling $WANT_TEST_SPELLING_VERSION+ required.";
      diag("$context $message");
      skip( $message, 1 );
   }
   elsif ( ! $isFoundPodWordlist ) {
      my $context = 'Skipping 1 of 1.';
      my $message = 'Pod::Worlist required.';
      diag("$context $message");
      skip( $message, 1 );
   }

   Test::Spelling->import();
   Pod::Wordlist->import();

   subtest(
      'All module subroutines have pod coverage?' => sub {

         add_stopwords(<DATA>);

         my @dirs;
         if ( -d 'lib' ) { push( @dirs, 'lib' ) }
         if ( -d 't' )   { push( @dirs, 't' ) }
         if ( -d 'xt' )  { push( @dirs, 'xt' ) }
         if ( -d 'bin' ) { push( @dirs, 'bin' ) }

         all_pod_files_spelling_ok(@dirs);
      }
   );
}

=pod

=encoding UTF-8

=for :stopwords Stuart R. Jefferys stopwords

=head1 NAME

xt/author/pod-spelling.t - All subs have correctly spelled documentation?

=head1 VERSION

version 0.0.2

=head1 SYNOPSIS

    # Run just this author test
    # cd <some built distribution version directory>
    prove -lr xt/author/pod-spelling.t

    # Run all author tests
    # cd <developer distribution directory>
    dzil test # [RunExtraTests] dist.ini plugin runs author tests by default.

=head1 DESCRIPTION

Misspelled words in documentation affects the user's perception of the quality
of the software.

Based on the test auto-generated by
L<Dist::Zilla::Plugin::Test::PodSpelling|Dist::Zilla::Plugin::Test::PodSpelling>.
Essentially just a wrapper around calling
L<Test::Spelling::all_pod_files_spelling_ok()|Test::Spelling:/all_pod_files_spelling_ok(
[@files/@directories] )>.

Any correctly spelled words not recognized can be added to the list in the DATA
section at the end of this test, or added into the pod with a line like

   =for :stopwords some words

As this addresses software quality but not functionality it is an author test.

The
L<Perl::Critic::Policy::Documentation::PodSpelling|Perl::Critic::Policy::Documentation::PodSpelling>
module checks spelling also, on a file-by-file basis. Useful if you want to
figure out what file to add rare stopwords to. This test merges the misspelled
words from all files and gives statistics. Useful if you want to just list all
the stopwords in one place, or to figure out which are rare and should be
specified in the source pod and not in a separate word list.

=head1 TESTS

=head2 Calling Test::Spelling::all_pod_files_spelling_ok()

Checks the spelling of all pod containing files in the distributions F<lib/>,
F<t/>, F<xt/>, and F<bin/> directories, if they exist. Skips testing anything if
didn't find the required version of L<Test::Spelling|Test::Spelling> or any
version of L<Pod::Wordlist|Pod::Wordlist>.

=cut

__DATA__
param
subtest
