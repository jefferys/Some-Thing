#! /usr/bin/env perl

use strict;
use warnings;
use 5.010;

# PODNAME: xt/author/unused-vars.t

# ABSTRACT: All variables in modules are actually used?

# VERSION

=head1 SYNOPSIS

    # Run just this author test
    # cd <some built distribution version directory>
    prove -lr xt/author/unused-vars.t

    # Run all author tests
    # cd <developer distribution directory>
    dzil test # [RunExtraTests] dist.ini plugin runs author tests by default.

=head1 DESCRIPTION

Unused variables are at best a waste of memory but may represent an error due to
a misspelling. Actual errors are likely caught elsewhere though.

Based on the test auto-generated by
L<Dist::Zilla::Plugin::Test::UnusedVars|Dist::Zilla::Plugin::Test::UnusedVars>.
Essentially just a wrapper around
L<Test::Vars::all_vars_ok()|Test::Vars/all_vars_ok(%args)>.

This is similar to the
L<Perl::Critic::Policy::Variables::ProhibitUnusedVariables|Perl::Critic::Policy::Variables::ProhibitUnusedVariables>
but uses a different approach. It scans the compiled source rather than a simple
source inspection scan. That is likely more comprehensive and more correct, but
it is also probably more expensive. The L<Perl::Critic|Perl::Critic> policy is
still needed, that can also be applied to executable and test files, this can
not.

This is an author test as failure is a code quality issue.

Does not test variables in scripts or tests.

=cut

use Test::More 0.96 tests => 1;    # Test harness, running one test

my $isFound = eval {
   require Test::Vars;             # Implements test for unsued vars
   1;
};

=head1 TESTS

=head2 calling Test::Vars::all_vars_ok()

Checks all variables in a distribution's modules. That means the files in the
MANIFEST with names like "lib/*.pm". This is true even on windows, as the
manifest always uses a fixed "/" directory separator - see
L<ExtUtils::Manifest|ExtUtils::Manifest>.

=cut

SKIP: {
   if ( ! $isFound ) {
      skip( 'Test::Vars required for testing for unused vars', 1 );
   }

   Test::Vars->import();

   subtest(
      'All vars used?' => sub {
         all_vars_ok();
      }
   );
}

__END__
