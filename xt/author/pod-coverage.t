#! /usr/bin/env perl

use strict;
use warnings;
use 5.010;

# PODNAME: xt/author/pod-coverage.t

# ABSTRACT: All subs have pod documentation?

our $VERSION = '0.0.1'; # VERSION

#pod =head1 SYNOPSIS
#pod
#pod     # Run just this author test
#pod     # cd <some built distribution version directory>
#pod     prove -lr xt/author/pod-coverage.t
#pod
#pod     # Run all author tests
#pod     # cd <developer distribution directory>
#pod     dzil test # [RunExtraTests] dist.ini plugin runs author tests by default.
#pod
#pod =head1 DESCRIPTION
#pod
#pod Documenting functions is a useful way to ensure their quality. Although all
#pod documentation is a maintenance load, it represents a contract with the user or
#pod the developer on what a function does and makes it easier to rework them later.
#pod
#pod Based on the test auto-generated by
#pod L<Dist::Zilla::Plugin::PodCoverageTests|Dist::Zilla::Plugin::PodCoverageTests>.
#pod Essentially just a wrapper around calling
#pod L<Test::Pod::Coverage::all_pod_coverage_ok()|Test::Pod::Coverage/all_pod_coverage_ok( [$parms, ] $msg )>
#pod
#pod Any function in the lib modules can be excluded (considered covered) by using
#pod
#pod     =for Pod::Coverage sub_name
#pod
#pod As much as I would like to, there is no way to easily get this to point at test
#pod files. It can process specified files, but not directories, so I would have to
#pod extract the list of files myself, which is too much work. The alternate
#pod incarnation of the Dist::Zilla plugin,
#pod L<Dist::Zilla::Plugin::Test::Pod::Coverage::Configurable|Dist::Zilla::Plugin::Test::Pod::Coverage::Configurable>,
#pod is only flexible about declaring what NOT to include for coverage. It doesn't
#pod let you pick things you WANT to include.
#pod
#pod I am unaware of any L<Perl::Critic|Perl::Critic> test that does this.
#pod
#pod =cut

# For interpolated constants
use Readonly;

# For version calcualtions
use version 0.77;

# Test harness interface, we are only running the one test.
use Test::More 0.96 tests => 1;

# Need to know if have Test::Pod::Coverage 1.08 or greater, and if have
# Pod::Coverage::TrustPod. Will skip this test if don't have both.
# Requiring modules with set versions is harder than with 'use'.
Readonly my $WANT_TEST_POD_COVERAGE_VERSION => 1.08;

my $isFoundTestPodCoverage = eval {

   # Implements pod coverage testing.
   require Test::Pod::Coverage;
   1;
};
if ($isFoundTestPodCoverage) {
   $isFoundTestPodCoverage = ( version->new( Test::Pod::Coverage->VERSION ) >=
        version->new($WANT_TEST_POD_COVERAGE_VERSION) );
}
my $isFoundTrustPod = eval {

   # Allows for marking a sub as "covered" even when it isn't.
   require Pod::Coverage::TrustPod;
   1;
};

#pod =head1 TESTS
#pod
#pod =head2 Calling Test::Pod::all_vars_ok()
#pod
#pod Checks the syntax of all pod containing files in the distributions F<lib/>,
#pod F<t/>, F<xt/>, and F<bin/> directories, if they exist. Skips testing anything
#pod if didn't find the required version of L<Test::Pod|Test::Pod>
#pod
#pod =cut

SKIP: {
   if ( ! $isFoundTestPodCoverage ) {
      my $context = 'Skipping 1 of 1.';
      my $message =
        "Test::Pod::Coverage $WANT_TEST_POD_COVERAGE_VERSION+ required.";
      diag("$context $message");
      skip( $message, 1 );
   }
   elsif ( ! $isFoundTrustPod ) {
      my $context = 'Skipping 1 of 1.';
      my $message = 'Pod::Coverage::TrustPod required.';
      diag("$context $message");
      skip( $message, 1 );
   }

   Test::Pod::Coverage->import();

   subtest(
      'All module subroutines have pod coverage?' => sub {
         all_pod_coverage_ok( { coverage_class => 'Pod::Coverage::TrustPod' } );
      }
   );
}

__END__

=pod

=encoding UTF-8

=for :stopwords Stuart R. Jefferys

=head1 NAME

xt/author/pod-coverage.t - All subs have pod documentation?

=head1 VERSION

version 0.0.1

=head1 SYNOPSIS

    # Run just this author test
    # cd <some built distribution version directory>
    prove -lr xt/author/pod-coverage.t

    # Run all author tests
    # cd <developer distribution directory>
    dzil test # [RunExtraTests] dist.ini plugin runs author tests by default.

=head1 DESCRIPTION

Documenting functions is a useful way to ensure their quality. Although all
documentation is a maintenance load, it represents a contract with the user or
the developer on what a function does and makes it easier to rework them later.

Based on the test auto-generated by
L<Dist::Zilla::Plugin::PodCoverageTests|Dist::Zilla::Plugin::PodCoverageTests>.
Essentially just a wrapper around calling
L<Test::Pod::Coverage::all_pod_coverage_ok()|Test::Pod::Coverage/all_pod_coverage_ok( [$parms, ] $msg )>

Any function in the lib modules can be excluded (considered covered) by using

    =for Pod::Coverage sub_name

As much as I would like to, there is no way to easily get this to point at test
files. It can process specified files, but not directories, so I would have to
extract the list of files myself, which is too much work. The alternate
incarnation of the Dist::Zilla plugin,
L<Dist::Zilla::Plugin::Test::Pod::Coverage::Configurable|Dist::Zilla::Plugin::Test::Pod::Coverage::Configurable>,
is only flexible about declaring what NOT to include for coverage. It doesn't
let you pick things you WANT to include.

I am unaware of any L<Perl::Critic|Perl::Critic> test that does this.

=head1 TESTS

=head2 Calling Test::Pod::all_vars_ok()

Checks the syntax of all pod containing files in the distributions F<lib/>,
F<t/>, F<xt/>, and F<bin/> directories, if they exist. Skips testing anything
if didn't find the required version of L<Test::Pod|Test::Pod>

=cut
