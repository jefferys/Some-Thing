name    = Some-Thing
author  = Stuart R. Jefferys <srjefferys@gmail.com>
license = Apache_2_0
copyright_holder = Stuart R. Jefferys
copyright_year   = 2015

; plain/plugins.ini
;=====================
;
;     Distributions are build by dzil from a development project, generally a
; directory with this dist.ini file, plus the source code, test code, and other
; files and directories needed to create a "cpan" distribution. This dist.ini
; file provides dzil with the instructions and data needed to build that
; distribution, it is the "project" file for a perl cpan module project managed
; by dzil.
;
;     Dzil is a DEVELOPER tool. Users install cpan distributions without using
; dzil, and this dist.ini file should not be in cpan distributions. That said,
; the development project for the module is often hosted on github, and it would
; be nice to be able to install directly from github (as allowed by "cpanm").
; Either there must be a second branch on github containing just the
; distribution, or the development directory must also qualify as a cpan
; directory. The latter is convienient by blurs a "separation of concerns"
; issue.
;
;
;     This dist.ini file supports a development cycle that looks like:
;
; (1) Minting phase: Create new dzil development project. As configured,
; minting includes setting up a local git repo and setting up remote GitHub
; repo.
;     cd ~/where/you/develop/
;     dzil new -p plain Foo::Bar
;
; (2) Initial release phase: Just about the minimal project skeleton that can
; be built. The manifest will require updating to include the main module and
; the test file for the main module. Nothing else should need changing.
;     cd ~/where/you/develop/
;     cd Foo-Bar
;     git status   # Clean?
;     dzil build    # Inculdes adding 2 manifest files.
;     git add ...   # Include .gitignore
;     git commit -m "..."   # Message like "Preparing for intitial release."
;     dzil test    # Fails? fix, go back to build, use git commit --amend
;     dzil xtest   # Fails? fix and go back to build
;     dzil cover   # Ignore for now. You may have 0% coverage.
;     git commit -m "..."   # Message like "Preparing for release."
;     git push origin master
;     dzil release
;
; (3) Build a feature:
;     git checkout -b new_feature_branch
;     # Code - Test - commit locally - update Changes
;     # Repeat till done
;     git checkout master
;     git merge new_feature_branch
;     # Everything ok?
;     git commit
;     git branch -d new_feature_branch
;     git push origin master
;
; (4) Release new features
;     # Verify Changes file is correct!
;     dzil build
;     dzil test    # If anything fails, fix and go back to build
;     dzil xtest   # If anything fails, fix and go back to build
;     dzil cover   # Do you have enough tests?
;     dzil release


;     Any [plugin] can be limited to a specific version or later like
;          :version = 1.02


;------------------------------------------
; Grab just about everything in the project
;------------------------------------------

;     Selects files and directories for inclusion in the distribution. Probably
;     don't want symlinked directories followed (you can change that).
;     Symlinked files are always copied and included (you can't change that
;     except using file excludes). The [PruneCruft] plugin drops a lot of stuff
;     from what is collected at this step (See below)
; Build - Gather (@Basic)
[GatherDir]
;     Where to copy all files and directories from, the project root. By
;     default this will be the root of the distriburion with the dist.ini file.
; root =               ; Default
;     Can copy all Gathered files and put them in this diretory.
; prefix =             ; Default
;     Copy hidden files or directories?
; include_dotfiles = 0 ; Default boolean
;     Follow symlinked DIRECTORIES?
; follow_symlinks = 0  ; Default boolean
;     Don't include these files (or directories). May be repeated
exclude_filename = dist.ini
exclude_filename = development.md
exclude_filename = weaver.ini
exclude_filename = README.md
;     Don't include files(or directories)  matching these regexps. May be
;     repeated
; exclude_match =      ; Default


;-------------------------------------------
; Remove a bunch of stuff don't want in dist
;-------------------------------------------

;     Out of what was selected by [GatherDir], drop a bunch of stuff that is
;     commonly found in the project directory, but doesn't need to wind up in
;     the distribution. By default, this plugin drops the following files:
;          <dist_name>-*,  .*,  *.o,  *.bs, MYMETA.yml,  MYMETA.json,
;          pm_to_blib, blib,  _Inline,  Build,  Makefile, *[c].xs
; Build - Prune (@Basic)
[PruneCruft]
;     Keep files and directories that match these regexps. May be repeated.
; except =   ; Default

;-------------------------------------------------------
; Generate files and add them to the dist (not project!)
;-------------------------------------------------------

;      Add a META.yml file to the distribution
; Build - Generate/Add (@Basic)
[MetaYAML]
;     Name of file to create
; filename = META.yml ; Default
;     Version of the "META" spec to use. Default = 1.4.
version = 2

;      Add a META.json file to the distribution
; Build - Generate/Add (@Basic)
[MetaJSON]
;     Name of file to create
; filename = META.json ; Default
;     Version of the "META" spec to use. Default = 2
version = 2   ; Default, specified for consistancy

;     Create the license file named in the config file. Can't modify or change
;     that here, just generates the named file.
; Build - Generate/Add (@Basic)
[License]

;      Not used as rewrites code. Just using the test phase plugin to run extra
;      tests along-side the normal tests when ENV variables are set.
; Build - Generate/Add (@Basic)
; [ExtraTests]

;     Install a directories contents as executables
; Build - Generate/Add (@Basic)
[ExecDir]
;     The directory containing executables to install with the dist
; dir = bin ; Default

;     Install a directories contents as shared data for use by this module
;     after install
; Build - Generate/Add (@Basic)
[ShareDir]
;     The directory containing the shared data
; dir = share ; Default

;     Collect all files matching the specified dir=, and also matching any
;     specified (file= or matching any match=), and also not matching any
;     skip=. skip= and match= take regExps. This one (TestFiles) is for use by
;     PodWeaver and OurPkgVersion to make them munge test files too.
; Anytime - FileFinder definition
[FileFinder::ByName / TestFiles]
dir = t
dir = xt
; file =
; match =
skip = \.ini

;     Generate much of the needed boilerplate using a separate weaver.ini file.
;     Pod will be collected and then merged at end of document. If collected
;     above code, it will be commented out  to keep the line numbers the same,
;     although this looks a little weird as the pod code seems duplicated.
;     Where Pod is collected from after the last code line, it is just removed
;     and as that has no effect on line numbers.
; Build - Rewrite
[PodWeaver]
;     Apply to files in lib/ (default)
finder = :InstallModules
;     Apply to files in bin/ (default)
finder = :ExecFiles
;     Above code, pod is commented out.
replacer = replace_with_comment
;     Below code, pod is just removed.
post_code_replacer = replace_with_nothing

;    Would really like to enable passing config file as optional parameter, but
; since can't, are limited to what can be specified inline like this.
[PodWeaver / PodWeaverTests]
;     Above code, pod is commented out.
replacer = replace_with_comment
;     Below code, pod is just removed.
post_code_replacer = replace_with_nothing
;     Apply to files in t/ and xt/ (defined above)
finder = TestFiles
config_plugin = @CorePrep
config_plugin = -SingleEncoding
config_plugin = -EnsureUniqueSections
config_plugin = -StopWords
config_plugin = Name
config_plugin = Version
config_plugin = Leftovers

;     Set the basic module builder mechansim to use with this distribution,
;     as ExtUtils::MakeMaker. Generates the Makefile.PL that allows a dist to
;     be built.
; Build - Generate/Add (@Basic)
[MakeMaker]
;     The minimum version of ExtUtils::MakeMaker to use. No default.
; eumm_version =
;     What is the path to the make executable you need. Default is what is
;     set in the Config used to build perl, or if not available, just "make".
; make_path =
;     Number of cpus to use. Hidden config inherited.
default_jobs = 9

; BUILD, RELASE, Changes, versioning.
;     On build, modifies the distro copy of the Changes file at build time by
; replacing {{$NEXT}} with a version and date/time stamp. Formatting codes for
; the version and date/time stamp should work as described in
; https://metacpan.org/pod/Dist::Zilla::Plugin::NextRelease
; but they don't seem to.
;     On release, rotates the working Changes file by replacing {{$NEXT}} with
; the build date/time timestamp and add a new {{$NEXT}} section at the top.
[NextRelease]
format = %v %{yyyy-MM-dd}d
; format = %-9v %{yyyy-MM-dd HH:mm:ss VVVV}d ; Not really the default...
; filename = Changes    ; Default
; update_filename =     ; Default is same as filename
; time_zone = local     ; Default
; user_stash = %User    ; Default

; BUILD, versioning, code
;      Replace '# VERSION' line in selected files with the current version.
[OurPkgVersion]
;     Apply to files in lib/ (default)
finder = :InstallModules
;     Apply to files in bin/ (default)
finder = :ExecFiles
;     Apply to files in t/ and xt/ (defined above)
finder = TestFiles
;     Above code, pod is commented out.

; BUILD, Changes, versioning
;      Parse the Changes file to get the previous version. Initial version will
; default to 0.0.1.
[PreviousVersion::Changelog]
; filename=Changes     ; Default

; RELEASE, Changes, versioning
;      Parse the tags in the change log to get next version. The first version
; number is incremented if there is a major group with a change listed, then if
; not the second version number is incremented if there is a minor change, or
; finally the third group is incremented. Releases without changes are not
; allowed. Versions are specified as #.###.###. More than 999 minor or revision
; increments at the same level should not be released, this automatically
; rotates the next higher version element.
;     Will update the version string in every file gathered to match that in
; the main module as specified by the file munger role?
[NextVersion::Semantic]
major = MAJOR, API CHANGE, BREAKING CHANGE
minor = MINOR, ENHANCEMENTS, FEATURE
revision = REVISION, BUG FIXES, DOCUMENTATION, UNGROUPED

;    Generates a readme from pod. Parses the / Readme<Format>In<Where> to
;    determine what format do generate and where to put it. Parsing is case
;    insencitive and the words Readme and In are optional. Probably shouldn't
;    generate .pod files into the dist as it will be installed by MakeMaker.
;          <Format> can be "text", "markdown", "pod", and "html".
;          <Where> can be "root" and "build".
;    Can also specify what and where using options.
; Build - Generate/Add (Replaces [Readme] - @Basic)
[ReadmeAnyFromPod]
;     <Format> for readme.
; type = text       ; Default
;     Name of the created readme, depends on format.
; filename = README ; Default for text
;     Change the source for you README, i.e. if you are creating an app.
; source_filename = ; Default is main module pod extract
;     Where to put the readme, in the build dir or in the root of the project.
; location = build  ; Default
;     When to generate the README, what phase - can be build or (after) release.
[ReadmeAnyFromPod / MarkdownInBuild]
[ReadmeAnyFromPod / HtmlInBuild]

;     Compare the existing distribution's MANIFEST file with the files
;     collected by Dist::Zilla. If different, it displays the differences and
;     offer to update the MANIFEST. This should come after all dist files have
;     been added
; Build - Generate/Add (Replaces [Manifest] - @Basic)
[MatchManifest]
;     Protects against putting in wrong place in the dist.ini, i.e. Die if the
;     dist is missing a Makefile.PL or Build.PL?
; require_builder = 1 ; Default boolean

;-------------------------
; Testing phase processing
;-------------------------

;     Runs all tests in xt/* except those in three special subdirectories. These
;     are only run if the correct environmental variable is set, or if the
;     appropriate option is used with dzil test or dzil xtest.
;          ./xt/author  - Author tests. Run if $AUTHOR_TESTING is true.
;          ./xt/release - Pre-release tests. Run if $RELEASE_TESTING is true.
;          ./xt/smoke   - Automated testers. Run if $AUTOMATED_TESTING is true.
; Test - (Replaces [ExtraTests])
[RunExtraTests]
;     Attribute for the underlying test runner, undocumented in RunExtraTests
default_jobs = 9

;     Verify everything has been commited before allowing release. By default
;     allows the "changelog" file and the dist.ini file to be dirty (to have
;     local changes.) This check be done after every build too, although
;     there failures trigger warnings instead of errors.
; Build   - Post-build  (@Git)
; Release - Pre-release (@Git)
[Git::Check]
;     The name of the change log, by default allowed to be dirty
; changelog = Changes      ; Default
;     The name of any file allowed to be dirty. May be repeated.
; allow_dirty = dist.ini   ; Default
;     RegExp of other files allowed to be dirty. May be repeated.
; allow_dirty_match = READ.*
;     Override defaults and not allow anything to be dirty.
; allow_dirty =
;     Perform checks after build too? (Post-build this check always generates
;     warnings, not errors.
; build_warnings = 0 Default boolean
;     What to do if there are untracked files? Options are "die", "warn", or
;    "ignore".
; untracked_files = die    ; Default

;     Not used, replaced with RunExtraTests
; Release - Pre-release (@Basic)
; [TestRelease]

;     Ask to release (default is no, you have to awnswer)
; Release - Pre-release (@Basic)
[ConfirmRelease]

;     Fake a release. Just logs a message. Can set the releaser (user) metadata
;     to allow other plugins that might need that to work
; Release
[FakeRelease]
; user = JEFFERYS ; # optional.

;      Actually upload file to CPAN. Commented out as only using GitHub.
; Release - Post-release (@Basic)
; [UploadToCPAN]

; @Git Notes
;------------------------------------------------------------------------------
; Common format codes used for all @Git plugins:
;    %c - Changes in the just-released version from the changelog. This is
;         the lines between the current version/timestamp and the next
;         non-indented line, except blank lines at the beginning or end.
;         Always ends in a newline unless this is the empty string.
;    %{dd-MMM-yyyy}d - The current date. You can use any CLDR format
;                      supported by DateTime.
;    %d - Shortcut for the current date formated as %{dd-MMM-yyyy}d.
;    %n - a newline
;    %N - the distribution name as Foo-Bar
;    %{-TRIAL}t - Expands to -TRIAL (or any other supplied string) if this
;                 is a trial release, or the empty string if not.
;    %t - Shortcut for the trial release specifier formated as %{-TRIAL}t.
;    %v - The distribution version
;------------------------------------------------------------------------------

;     Commit files updated by the release process to Git. This should come
;     close to last as it sets up the local repository for continuing
;     development. For example, releasing probably tags the Changes file with a
;     time and date heading. This plugin commits the modified Changes file after
;     release. Commits only the files specified and only if they were actually
;     modified. By default Changes and dist.ini are checked. Can specify a
;     commit message using the @Git plugin format codes, by default = v%v%n%n%c.
; Release - Post-release (@Git)
[Git::Commit]
;     The name of the change log, by default will be commited if needed.
; changelog = Changes      ; Default
;     The name of a file checked to see if it needs commiting. May be repeated.
; allow_dirty = dist.ini  ; Default
;     RegExp of files allowed to be dirty. May be repeated.
; allow_dirty_match =
;     New files (as opposed to modified files to be checked in and committed.
;     May be repeated.
; add_files_in =
;     Time zone to use with %d. Can be any time zone name accepted by DateTime.
; time_zone = local ; Default
;     The commit message using the format fields described above.
commit_msg =Auto-commit after release of v%v%n%n%c

[Git::CommitBuild]
release_branch = release
multiple_inheritance = 1

;     Tag the released branch at the current node.
; Release - Post-release (@Git)
[Git::Tag]
;     The format for the tag, uses the @Git plugin format codes. Can't reuse an
;     existing tag.
; tag_format  = v%v       ; this is the default
;     The format for any tag message, uses the @Git plugin format codes. If set
;     this empty, creates a git "lightweight" tag.
; tag_message = v%v       ; this is the default
;     Time zone to use with %d. Can be any time zone name accepted by DateTime.
; time_zone = local ; Default
;     Which branch to tag? Defaults to the current branch.
branch = release
;     Make this a GPG-signed tag using the default e-mail address's key?
;     Consider setting user.signingkey if gpg can't find the correct key:
;          $ git config user.signingkey 450F89EC
; signed = 0 ; Default boolean

; Release - Post-release (@Git)
;      Push local git repository changes to the remote as specified for that
; repository. Can specify which branch to push to.
[Git::Push]
;     Are all named remotes configured in your repo? Remotes specified as a
;     URL or path are not checked, but will produce a "Will push to %s (not
;     checked) message."
; remotes_must_exist = 1 ; Default boolean
;     The name of a remote to push to, and optionally the branch. The default
;     is origin and it will look up the default branch. May be repeated.
push_to = origin master  ; Default, but explicit branch used here
push_to = origin release ; Also push cpan released dist branch
